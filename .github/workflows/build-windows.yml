name: windows

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SOURCE_DIR: external

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - "master"
    paths:
      - ".github/workflows/build-windows.yml"
  workflow_dispatch:
  workflow_run:
    workflows: ["listen"]
    types:
      - completed

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Set up environment variables
        run: |
          echo "BUILD_DIR=$env:GITHUB_WORKSPACE\platforms\windows" >> $env:GITHUB_ENV
          
          if (Test-Path "$env:SOURCE_DIR") {
            echo "WORKING_DIR=$env:GITHUB_WORKSPACE\$env:SOURCE_DIR" >> $env:GITHUB_ENV
          } else {
            echo "WORKING_DIR=$env:GITHUB_WORKSPACE" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Clean and Create output directories
        run: |
          if (Test-Path -Path "$env:BUILD_DIR") {
            Remove-Item -Path "$env:BUILD_DIR" -Recurse -Force
          }
          New-Item -Path "$env:BUILD_DIR\lib\amd64" -ItemType Directory -Force
          New-Item -Path "$env:BUILD_DIR\lib\arm64" -ItemType Directory -Force
          New-Item -Path "$env:BUILD_DIR\lib\386" -ItemType Directory -Force
        shell: pwsh

      - name: Build for Windows AMD64
        run: |
          Write-Output "Building for Windows AMD64..."
          Set-Location $env:WORKING_DIR
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "1"
          go build -buildmode=c-shared `
            -trimpath `
            -ldflags="-s -w -buildid=" `
            -tags="with_debug" `
            -o "$env:BUILD_DIR\lib\amd64\dbox.dll" `
            .\cmd\dbox
        shell: pwsh

      - name: Set up MinGW for cross-compilation
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          version: 12.2.0 
          platform: x86

      - name: Build for Windows 386
        run: |
          Write-Output "Building for Windows 386..."
          Set-Location $env:WORKING_DIR
          $env:GOOS = "windows"
          $env:GOARCH = "386"
          $env:CGO_ENABLED = "1"
          go build -buildmode=c-shared `
            -trimpath `
            -ldflags="-s -w -buildid=" `
            -tags="with_debug" `
            -o "$env:BUILD_DIR\lib\386\dbox.dll" `
            .\cmd\dbox
        shell: pwsh

      - name: Verify the libraries
        run: |
          Set-Location $env:GITHUB_WORKSPACE
          
          Write-Output "Verifying AMD64 library:"
          if (Test-Path "$env:BUILD_DIR\lib\amd64\dbox.dll") {
            Write-Output "AMD64 library exists"
            Get-Item $env:BUILD_DIR\lib\amd64\dbox.dll | Format-List
          } else {
            Write-Error "ERROR: AMD64 library not found"
            exit 1
          }
          
          Write-Output "Verifying 386 library:"
          if (Test-Path "$env:BUILD_DIR\lib\386\dbox.dll") {
            Write-Output "386 library exists"
            Get-Item $env:BUILD_DIR\lib\386\dbox.dll | Format-List
          } else {
            Write-Error "ERROR: 386 library not found"
            exit 1
          }
        shell: pwsh

      - name: Commit and push changes
        run: |
          Set-Location $env:GITHUB_WORKSPACE
          
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git stash -u
          git pull --rebase
          git stash pop || true
          git add $env:BUILD_DIR\lib
          
          $hasChanges = git diff --staged --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Output "No changes detected in Windows libraries. Skipping commit."
          } else {
            Write-Output "Changes detected in Windows libraries. Creating commit..."
            $timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss UTC")
            git commit -m "Build Windows libraries ($timestamp)"
            git push
            Write-Output "Successfully pushed changes to repository."
          }
        shell: pwsh