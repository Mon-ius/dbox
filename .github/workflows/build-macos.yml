name: macos

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BUILD_DIR: native/macos
  SOURCE_DIR: external

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - "master"
    paths:
      - ".github/workflows/build-macos.yml"
  workflow_dispatch:
  workflow_run:
    workflows: ["listen", "ci"]
    types:
      - completed

jobs:
  parse-info:
    uses: ./.github/workflows/parse-info.yml
    with:
      path: 'pubspec.yaml'
      target: 'macos'

  build-macos:
    needs: parse-info
    runs-on: macos-latest
    env:
      PKG: ${{ needs.parse-info.outputs.name_lower }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Install Xcode Command Line Tools
        run: |
          xcode-select --print-path
          sudo xcode-select --switch /Applications/Xcode.app

      - name: Set up environment variables
        run: |
          if [ -d "$SOURCE_DIR" ]; then
            echo "WORKING_DIR=$GITHUB_WORKSPACE/$SOURCE_DIR" >> $GITHUB_ENV
          else
            echo "WORKING_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          fi

      - name: Clean and Create output directories
        run: |
          rm -rf $BUILD_DIR
          mkdir -p $BUILD_DIR/libs/arm64
          mkdir -p $BUILD_DIR/libs/amd64
          mkdir -p $BUILD_DIR/libs/universal

      - name: Build for macOS arm64 (Apple Silicon)
        run: |
          echo "Building for macOS arm64..."
          cd $WORKING_DIR
          
          TAGS="with_debug macos"
          LDFLAGS="-s -w -buildid="
          
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 \
            CC=$(xcrun --sdk macosx --find clang) \
            CXX=$(xcrun --sdk macosx --find clang++) \
            CGO_CFLAGS="-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=11.0 -arch arm64" \
            CGO_LDFLAGS="-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=11.0 -arch arm64" \
            go build -v \
            -buildmode=c-shared \
            -trimpath \
            -buildvcs=false \
            -ldflags="$LDFLAGS" \
            -tags="$TAGS" \
            -o "$BUILD_DIR/libs/arm64/lib${PKG}.dylib" \
            ./cmd/${PKG}

      - name: Build for macOS amd64 (Intel)
        run: |
          echo "Building for macOS amd64..."
          cd $WORKING_DIR
          
          TAGS="with_debug macos"
          LDFLAGS="-s -w -buildid="
          
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 \
            CC=$(xcrun --sdk macosx --find clang) \
            CXX=$(xcrun --sdk macosx --find clang++) \
            CGO_CFLAGS="-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=10.13 -arch x86_64" \
            CGO_LDFLAGS="-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=10.13 -arch x86_64" \
            go build -v \
            -buildmode=c-shared \
            -trimpath \
            -buildvcs=false \
            -ldflags="$LDFLAGS" \
            -tags="$TAGS" \
            -o "$BUILD_DIR/libs/amd64/lib${PKG}.dylib" \
            ./cmd/${PKG}

      - name: Create Universal Dylib
        run: |
          echo "Creating universal dylib..."

          lipo -create \
            $BUILD_DIR/libs/arm64/lib${PKG}.dylib \
            $BUILD_DIR/libs/amd64/lib${PKG}.dylib \
            -output $BUILD_DIR/libs/universal/lib${PKG}.dylib
          
          cp $BUILD_DIR/libs/arm64/lib${PKG}.h $BUILD_DIR/libs/universal/

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          git stash -u
          git pull --rebase
          git stash pop || true

          # git add $BUILD_DIR/libs ${PKG}-macos.podspec
          git add $BUILD_DIR/libs
          
          if git diff --staged --quiet; then
            echo "No changes detected in macOS libraries. Skipping commit."
          else
            echo "Changes detected in macOS libraries. Creating commit..."
            git commit -m "Build macOS dynamic libraries ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
            echo "Successfully pushed changes to repository."
          fi